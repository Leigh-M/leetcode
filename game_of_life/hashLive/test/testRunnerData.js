const buildNeighboursTests = [
  {
    liveCells: [
      [100, 100], [101, 100], [102, 100],
    ],
    expectedMapLength: 15,
    // [key, count] pairs
    adj: [['100,100', 1], ['101,100', 2], ['102,100', 1]],
  },
  {
    liveCells: [
      [100, 100], [101, 100], [102, 100], [101, 99],
    ],
    expectedMapLength: 18,
    adj: [['100,100', 2], ['101,100', 3], ['101,99', 3], ['102,100', 2]],
  },
  {
    // 'acorn' seed
    liveCells: [
      [100, 100], [101, 100], [101, 98], [103, 99], [104, 100], [105, 100], [106, 100],
    ],
    expectedMapLength: 35,
    adj: [['101,99', 3], ['102,99', 3], ['102,100', 2], ['103,100', 2], ['99,100', 1], ['99,99', 1], ['100,99', 3], ['100,98', 1], ['100,97', 1], ['101,97', 1], ['102,97', 1], ['102,98', 2], ['103,98', 1], ['104,98', 1], ['104,99', 3], ['105,99', 3], ['106,99', 2], ['107,99', 1], ['107,100', 1], ['107,101', 1], ['106,101', 2], ['105,101', 3], ['104,101', 2], ['103,101', 1], ['102,101', 1], ['101,101', 2], ['100,101', 2], ['99,101', 1], ['100,100', 1], ['101,100', 1], ['103,99', 1], ['104,100', 2], ['105,100', 2], ['106,100', 1]],
  },
];


const logicTests = [
  {
    live: [
      [100, 100], [101, 100], [102, 100],
    ],
    stillLive: '101,100',
    overCrowd: [
      [99, 100], [100, 100], [101, 100], [100, 99], [100, 101],
    ],
    diedOverCrowding: '100,100',
    lonelyCells: [
      [99, 100], [100, 100],
    ],
    diedLoneliness: '100,100',
  },
  { // acorn
    live: [
      [100, 100], [99, 101], [101, 98], [103, 99], [104, 100], [105, 100], [106, 100],
    ],
    stillLive: '104,100',
    overCrowd: [
      [99, 100], [100, 100], [99, 99], [100, 99], [100, 101],
    ],
    diedOverCrowding: '99,100',
    lonelyCells: [
      [100, 100],
    ],
    diedLoneliness: '100,100',
  },
];

// full system: life() tests, 4 consecutive generations
const lifeTests = [
  { // 'acorn' seed
    seed: [
      [100, 100], [101, 100], [101, 98], [103, 99], [104, 100], [105, 100], [106, 100],
    ], // 1st tick
    expected: [
      [100, 99], [101, 99], [102, 99], [104, 100], [105, 100], [104, 99], [105, 99],
      [105, 101],
    ],
  },
  {
    seed: [
      [100, 99], [101, 99], [102, 99], [104, 100], [105, 100], [104, 99], [105, 99],
      [105, 101],
    ], // 2nd tick
    expected: [
      [101, 100], [101, 99], [101, 98], [103, 100], [103, 99], [104, 99], [105, 99],
      [106, 100], [105, 101], [104, 101],
    ],
  },
  {
    seed: [
      [101, 100], [101, 99], [101, 98], [103, 100], [103, 99], [104, 99], [105, 99],
      [106, 100], [105, 101], [104, 101],
    ], // 3rd tick
    expected: [
      [100, 99], [101, 99], [102, 98], [103, 100], [103, 99], [104, 99], [104, 98], [104, 101],
      [105, 101], [105, 99], [106, 100],
    ],
  },
  {
    seed: [
      [100, 99], [101, 99], [102, 98], [103, 100], [103, 99], [104, 99], [104, 98], [104, 101],
      [105, 101], [105, 99], [106, 100],
    ], // 4th tick
    expected: [
      [101, 99], [101, 98], [102, 98], [102, 100], [103, 100], [104, 98], [104, 101],
      [105, 98], [105, 99], [105, 101], [106, 100],
    ],
  },
];

module.exports = { buildNeighboursTests, logicTests, lifeTests };
